//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApp1.CateService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/testWCF")]
    [System.SerializableAttribute()]
    public partial class Category : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LongNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShortNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryID {
            get {
                return this.CategoryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryIDField, value) != true)) {
                    this.CategoryIDField = value;
                    this.RaisePropertyChanged("CategoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LongName {
            get {
                return this.LongNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LongNameField, value) != true)) {
                    this.LongNameField = value;
                    this.RaisePropertyChanged("LongName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.ShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortNameField, value) != true)) {
                    this.ShortNameField = value;
                    this.RaisePropertyChanged("ShortName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CateService.ICategoryService")]
    public interface ICategoryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/GetCategories", ReplyAction="http://tempuri.org/ICategoryService/GetCategoriesResponse")]
        WebApp1.CateService.Category[] GetCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/GetCategories", ReplyAction="http://tempuri.org/ICategoryService/GetCategoriesResponse")]
        System.Threading.Tasks.Task<WebApp1.CateService.Category[]> GetCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/GetCategoryById", ReplyAction="http://tempuri.org/ICategoryService/GetCategoryByIdResponse")]
        WebApp1.CateService.Category GetCategoryById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/GetCategoryById", ReplyAction="http://tempuri.org/ICategoryService/GetCategoryByIdResponse")]
        System.Threading.Tasks.Task<WebApp1.CateService.Category> GetCategoryByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/InsertCategory", ReplyAction="http://tempuri.org/ICategoryService/InsertCategoryResponse")]
        int InsertCategory(WebApp1.CateService.Category c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/InsertCategory", ReplyAction="http://tempuri.org/ICategoryService/InsertCategoryResponse")]
        System.Threading.Tasks.Task<int> InsertCategoryAsync(WebApp1.CateService.Category c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/UpdateCategory", ReplyAction="http://tempuri.org/ICategoryService/UpdateCategoryResponse")]
        int UpdateCategory(WebApp1.CateService.Category c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/UpdateCategory", ReplyAction="http://tempuri.org/ICategoryService/UpdateCategoryResponse")]
        System.Threading.Tasks.Task<int> UpdateCategoryAsync(WebApp1.CateService.Category c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/DeleteCategory", ReplyAction="http://tempuri.org/ICategoryService/DeleteCategoryResponse")]
        int DeleteCategory(WebApp1.CateService.Category c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/DeleteCategory", ReplyAction="http://tempuri.org/ICategoryService/DeleteCategoryResponse")]
        System.Threading.Tasks.Task<int> DeleteCategoryAsync(WebApp1.CateService.Category c);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICategoryServiceChannel : WebApp1.CateService.ICategoryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CategoryServiceClient : System.ServiceModel.ClientBase<WebApp1.CateService.ICategoryService>, WebApp1.CateService.ICategoryService {
        
        public CategoryServiceClient() {
        }
        
        public CategoryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CategoryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CategoryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CategoryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WebApp1.CateService.Category[] GetCategories() {
            return base.Channel.GetCategories();
        }
        
        public System.Threading.Tasks.Task<WebApp1.CateService.Category[]> GetCategoriesAsync() {
            return base.Channel.GetCategoriesAsync();
        }
        
        public WebApp1.CateService.Category GetCategoryById(string id) {
            return base.Channel.GetCategoryById(id);
        }
        
        public System.Threading.Tasks.Task<WebApp1.CateService.Category> GetCategoryByIdAsync(string id) {
            return base.Channel.GetCategoryByIdAsync(id);
        }
        
        public int InsertCategory(WebApp1.CateService.Category c) {
            return base.Channel.InsertCategory(c);
        }
        
        public System.Threading.Tasks.Task<int> InsertCategoryAsync(WebApp1.CateService.Category c) {
            return base.Channel.InsertCategoryAsync(c);
        }
        
        public int UpdateCategory(WebApp1.CateService.Category c) {
            return base.Channel.UpdateCategory(c);
        }
        
        public System.Threading.Tasks.Task<int> UpdateCategoryAsync(WebApp1.CateService.Category c) {
            return base.Channel.UpdateCategoryAsync(c);
        }
        
        public int DeleteCategory(WebApp1.CateService.Category c) {
            return base.Channel.DeleteCategory(c);
        }
        
        public System.Threading.Tasks.Task<int> DeleteCategoryAsync(WebApp1.CateService.Category c) {
            return base.Channel.DeleteCategoryAsync(c);
        }
    }
}
